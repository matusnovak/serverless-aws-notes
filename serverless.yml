service: serverless-aws-notes

custom:
  apigs3:
    dist: client/dist
  dynamodb:
    tableUsers: ${self:service}-${self:provider.stage}-users
  s3:
    bucketData: ${self:service}-${self:provider.stage}-data
  auth:
    secret: 'verysecrettoken'
    masterPassword: 'admin'

package:
  exclude:
    # Exclude everything!
    - "*/**"
  include:
    # Source files
    - "server/src/rest/**"
    - "server/src/utils/**"
    # Dependencies bcryptjs + jsonwebtoken
    - "server/node_modules/bcryptjs/**"
    - "server/node_modules/buffer-equal-constant-time/**"
    - "server/node_modules/ecdsa-sig-formatter/**"
    - "server/node_modules/jsonwebtoken/**"
    - "server/node_modules/jwa/**"
    - "server/node_modules/jws/**"
    - "server/node_modules/lodash*/**"
    - "server/node_modules/ms/**"
    - "server/node_modules/safe-buffer/**"

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  environment:
    DYNAMODB_TABLE_USERS: ${self:custom.dynamodb.tableUsers}
    AUTH_SECRET: ${self:custom.auth.secret}
    AUTH_MASTER_PASSWORD: ${self:custom.auth.masterPassword}
    S3_BUCKET_DATA: ${self:custom.s3.bucketData}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: 
        - "arn:aws:s3:::${self:custom.s3.bucketData}"
        - "arn:aws:s3:::${self:custom.s3.bucketData}/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${self:provider.stage}-*"

plugins:
  - serverless-apig-s3

functions:
  # User handling functions
  user_auth:
    handler: server/src/rest/users.auth
  user_register:
    handler: server/src/rest/users.register
    events:
      - http:
          path: rest/user/register
          method: post
          authorizer: user_auth # Only registered users can add new users
  user_login:
    handler: server/src/rest/users.login
    events:
      - http:
          path: rest/user/login
          method: post
  user_logout:
    handler: server/src/rest/users.logout
    events:
      - http:
          path: rest/user/logout
          method: post
  # Notes handling functions
  dir_list:
    handler: server/src/rest/dirs.list
    events:
      - http:
          path: rest/note/{prefix}
          method: get
          request:
            parameters:
              prefix: true
          authorizer: user_auth
  dir_read:
    handler: server/src/rest/dirs.read
    events:
      - http:
          path: rest/note/{prefix}/{directory}
          method: get
          request:
            parameters:
              prefix: true
              directory: true
          authorizer: user_auth
  dir_create:
    handler: server/src/rest/dirs.create
    events:
      - http:
          path: rest/note/{prefix}
          method: post
          request:
            parameters:
              prefix: true
          authorizer: user_auth
  dir_update:
    handler: server/src/rest/dirs.update
    events:
      - http:
          path: rest/note/{prefix}/{directory}
          method: put
          request:
            parameters:
              prefix: true
              directory: true
          authorizer: user_auth
  dir_delete:
    handler: server/src/rest/dirs.delete
    events:
      - http:
          path: rest/note/{prefix}/{directory}
          method: delete
          request:
            parameters:
              prefix: true
              directory: true
          authorizer: user_auth
  file_create:
    handler: server/src/rest/files.create
    events:
      - http:
          path: rest/note/{prefix}/{directory}
          method: post
          request:
            parameters:
              prefix: true
              directory: true
          authorizer: user_auth
  file_read:
    handler: server/src/rest/files.read
    events:
      - http:
          path: rest/note/{prefix}/{directory}/{file}
          method: get
          request:
            parameters:
              prefix: true
              directory: true
              file: true
          authorizer: user_auth
  file_update:
    handler: server/src/rest/files.update
    events:
      - http:
          path: rest/note/{prefix}/{directory}/{file}
          method: put
          request:
            parameters:
              prefix: true
              directory: true
              file: true
          authorizer: user_auth
resources:
  Resources:
    S3BucketData:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:custom.s3.bucketData}
    DynamoDbTableUsers:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.dynamodb.tableUsers}
